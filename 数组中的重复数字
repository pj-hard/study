题目描述：
在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。
数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。
请找出数组中任意一个重复的数字。

// -----------------------------c++版-----------------------------
// 解提思路1：因为所有数字都在 0～n-1 的范围内，nums的长度为n，
// 根据小球和盒子原理，必有一个盒子里面有2个或以上的小球，
// 这里将元素的值放在对应的索引处，则必有一个索引对应着两个元素
class Solution {
public:
    int findRepeatNumber(vector<int>& nums) {
        // 索引从0开始
        int i = 0;
        // 遍历一遍
        while(i < nums.size()){
            // 如果索引值刚好和该索引对应的元素值相等，则跳到下一个
            if(nums[i] == i){
                ++i;
                continue;
            }
            // 如果发现索引值对应元素值与索引值对应元素值对应的元素值相等，则发现重复数据
            if(nums[i]==nums[nums[i]]){
                return nums[i];
            }
            // 将元素交换到其对应的位置，如a[3]=5,则将5这个元素移动到数组的第五个位置上
            int temp = nums[i];
            nums[i] = nums[temp];
            nums[temp] = temp;
        }
        return -1;
    }
};

// 解提思路2：利用哈希表记录数组的各个数字，当查找到重复数字则直接返回。
class Solution {
public:
    int findRepeatNumber(vector<int>& nums) {
        // 集合采用键值对的形式
        unordered_map<int, bool>map;
        for(int num : nums){
            // 当前元素已经在集合中，则返回
            if(map[num])
                return num;
            // 否则将元素添加到集合中
            map[num]=true;
        }
        return -1;
    }
};


// -----------------------------java版-----------------------------
// 解法1
class Solution {
    public int findRepeatNumber(int[] nums) {
        int i = 0;
        while(i < nums.length){
            if(nums[i] == i){
                ++i;
                continue;
            }
            if(nums[i] == nums[nums[i]]){
                return nums[i];
            }
            int temp = nums[i];
            nums[i] = nums[temp];
            nums[temp] = temp;  
        }
        return -1;
    }
}
// 解法2
class Solution {
    public int findRepeatNumber(int[] nums) {
        Set<Integer> dic = new HashSet<>();
        for(int num : nums) {
            if(dic.contains(num)) return num;
            dic.add(num);
        }
        return -1;
    }
}
